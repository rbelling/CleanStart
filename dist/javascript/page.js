/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = ".";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _TweenLite = __webpack_require__(4);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  var $loader = document.querySelectorAll('.r-loader-screen');\n  var hide = function hide() {\n    _TweenLite2.default.to($loader, 1, {\n      autoAlpha: 0,\n      ease: Power3.easeOut\n    });\n  };\n  var init = function init() {};\n  return {\n    init: init, hide: hide\n  };\n}(); /*----------  Javascript responsible for the loader  ----------*///# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL2xvYWRlci5qcz81ODg3Il0sIm5hbWVzIjpbIiRsb2FkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoaWRlIiwidG8iLCJhdXRvQWxwaGEiLCJlYXNlIiwiUG93ZXIzIiwiZWFzZU91dCIsImluaXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOzs7Ozs7a0JBRWdCLFlBQU07QUFDcEIsTUFBTUEsVUFBVUMsU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLENBQWhCO0FBQ0EsTUFBTUMsT0FBTyxTQUFQQSxJQUFPLEdBQU07QUFDakIsd0JBQVVDLEVBQVYsQ0FBYUosT0FBYixFQUFzQixDQUF0QixFQUF5QjtBQUN2QkssaUJBQVcsQ0FEWTtBQUV2QkMsWUFBTUMsT0FBT0M7QUFGVSxLQUF6QjtBQUtELEdBTkQ7QUFPQSxNQUFNQyxPQUFPLFNBQVBBLElBQU8sR0FBTSxDQUVsQixDQUZEO0FBR0EsU0FBTztBQUNMQSxjQURLLEVBQ0NOO0FBREQsR0FBUDtBQUdELENBZmMsRSxFQUhmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0gIEphdmFzY3JpcHQgcmVzcG9uc2libGUgZm9yIHRoZSBsb2FkZXIgIC0tLS0tLS0tLS0qL1xuaW1wb3J0IFR3ZWVuTGl0ZSBmcm9tICcuLi92ZW5kb3IvZ3NhcC9Ud2VlbkxpdGUnO1xuXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4ge1xuICBjb25zdCAkbG9hZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnItbG9hZGVyLXNjcmVlbicpO1xuICBjb25zdCBoaWRlID0gKCkgPT4ge1xuICAgIFR3ZWVuTGl0ZS50bygkbG9hZGVyLCAxLCB7XG4gICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dCxcbiAgICAgIC8vZWFzZTogTGluZWFyLmVhc2VOb25lLFxuICAgIH0pO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuXG4gIH07XG4gIHJldHVybiB7XG4gICAgaW5pdCwgaGlkZSxcbiAgfTtcbn0pKCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvbG9hZGVyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__webpack_require__(3);\n\nvar _fastclick = __webpack_require__(5);\n\nvar _fastclick2 = _interopRequireDefault(_fastclick);\n\nvar _loader = __webpack_require__(1);\n\nvar _loader2 = _interopRequireDefault(_loader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import './vendor/picturefill';\n// import './vendor/gsap/TweenMax';\n// import './vendor/gsap/plugins/ScrollToPlugin';\n\n// require('../sass/app.scss');\n\nalert('so qua');\n\nexports.default = function () {\n  var _initModules = function _initModules() {\n    (0, _fastclick2.default)(document.body, {});\n  };\n\n  var init = function init() {\n    _initModules();\n    console.log('app - ready');\n\n    _loader2.default.hide();\n  };\n  return {\n    init: init\n  };\n}();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9wYWdlLmpzPzA2ZjciXSwibmFtZXMiOlsiYWxlcnQiLCJfaW5pdE1vZHVsZXMiLCJkb2N1bWVudCIsImJvZHkiLCJpbml0IiwiY29uc29sZSIsImxvZyIsImhpZGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQUEsTUFBTSxRQUFOOztrQkFDZ0IsWUFBTTtBQUNwQixNQUFNQyxlQUFlLFNBQWZBLFlBQWUsR0FBTTtBQUN6Qiw2QkFBVUMsU0FBU0MsSUFBbkIsRUFBeUIsRUFBekI7QUFDRCxHQUZEOztBQUlBLE1BQU1DLE9BQU8sU0FBUEEsSUFBTyxHQUFNO0FBQ2pCSDtBQUNBSSxZQUFRQyxHQUFSOztBQUVBLHFCQUFPQyxJQUFQO0FBQ0QsR0FMRDtBQU1BLFNBQU87QUFDTEg7QUFESyxHQUFQO0FBR0QsQ0FkYyxFIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vdmVuZG9yL01vZGVybml6cic7XG5pbXBvcnQgZmFzdENsaWNrIGZyb20gJ2Zhc3RjbGljayc7XG5pbXBvcnQgTG9hZGVyIGZyb20gJy4vbW9kdWxlcy9sb2FkZXInO1xuLy8gaW1wb3J0ICcuL3ZlbmRvci9waWN0dXJlZmlsbCc7XG4vLyBpbXBvcnQgJy4vdmVuZG9yL2dzYXAvVHdlZW5NYXgnO1xuLy8gaW1wb3J0ICcuL3ZlbmRvci9nc2FwL3BsdWdpbnMvU2Nyb2xsVG9QbHVnaW4nO1xuXG4vLyByZXF1aXJlKCcuLi9zYXNzL2FwcC5zY3NzJyk7XG5cbmFsZXJ0KCdzbyBxdWEnKTtcbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiB7XG4gIGNvbnN0IF9pbml0TW9kdWxlcyA9ICgpID0+IHtcbiAgICBmYXN0Q2xpY2soZG9jdW1lbnQuYm9keSwge30pO1xuICB9O1xuXG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgX2luaXRNb2R1bGVzKCk7XG4gICAgY29uc29sZS5sb2coYGFwcCAtIHJlYWR5YCk7XG5cbiAgICBMb2FkZXIuaGlkZSgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGluaXQsXG4gIH07XG59KSgpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvamF2YXNjcmlwdC9wYWdlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* eslint-disable */\n/*! modernizr 3.2.0 (Custom Build) | MIT *\n * http://modernizr.com/download/?-csscalc-matchmedia-touchevents-video-mq-setclasses !*/\n!function (e, n, t) {\n    function o(e, n) {\n        return (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === n;\n    }\n\n    function r() {\n        var e, n, t, r, i, a, s;\n        for (var l in g) {\n            if (g.hasOwnProperty(l)) {\n                if (e = [], n = g[l], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) {\n                    e.push(n.options.aliases[t].toLowerCase());\n                }for (r = o(n.fn, \"function\") ? n.fn() : n.fn, i = 0; i < e.length; i++) {\n                    a = e[i], s = a.split(\".\"), 1 === s.length ? Modernizr[s[0]] = r : (!Modernizr[s[0]] || Modernizr[s[0]] instanceof Boolean || (Modernizr[s[0]] = new Boolean(Modernizr[s[0]])), Modernizr[s[0]][s[1]] = r), h.push((r ? \"\" : \"no-\") + s.join(\"-\"));\n                }\n            }\n        }\n    }\n\n    function i(e) {\n        var n = w.className,\n            t = Modernizr._config.classPrefix || \"\";\n        if (x && (n = n.baseVal), Modernizr._config.enableJSClass) {\n            var o = new RegExp(\"(^|\\\\s)\" + t + \"no-js(\\\\s|$)\");\n            n = n.replace(o, \"$1\" + t + \"js$2\");\n        }\n        Modernizr._config.enableClasses && (n += \" \" + t + e.join(\" \" + t), x ? w.className.baseVal = n : w.className = n);\n    }\n\n    function a() {\n        return \"function\" != typeof n.createElement ? n.createElement(arguments[0]) : x ? n.createElementNS.call(n, \"http://www.w3.org/2000/svg\", arguments[0]) : n.createElement.apply(n, arguments);\n    }\n\n    function s() {\n        var e = n.body;\n        return e || (e = a(x ? \"svg\" : \"body\"), e.fake = !0), e;\n    }\n\n    function l(e, t, o, r) {\n        var i,\n            l,\n            u,\n            c,\n            f = \"modernizr\",\n            p = a(\"div\"),\n            d = s();\n        if (parseInt(o, 10)) for (; o--;) {\n            u = a(\"div\"), u.id = r ? r[o] : f + (o + 1), p.appendChild(u);\n        }return i = a(\"style\"), i.type = \"text/css\", i.id = \"s\" + f, (d.fake ? d : p).appendChild(i), d.appendChild(p), i.styleSheet ? i.styleSheet.cssText = e : i.appendChild(n.createTextNode(e)), p.id = f, d.fake && (d.style.background = \"\", d.style.overflow = \"hidden\", c = w.style.overflow, w.style.overflow = \"hidden\", w.appendChild(d)), l = t(p, e), d.fake ? (d.parentNode.removeChild(d), w.style.overflow = c, w.offsetHeight) : p.parentNode.removeChild(p), !!l;\n    }\n\n    function u(e) {\n        return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {\n            return n + t.toUpperCase();\n        }).replace(/^-/, \"\");\n    }\n\n    function c(e, n) {\n        return !!~(\"\" + e).indexOf(n);\n    }\n\n    function f(e, n) {\n        return function () {\n            return e.apply(n, arguments);\n        };\n    }\n\n    function p(e, n, t) {\n        var r;\n        for (var i in e) {\n            if (e[i] in n) return t === !1 ? e[i] : (r = n[e[i]], o(r, \"function\") ? f(r, t || n) : r);\n        }return !1;\n    }\n\n    function d(e) {\n        return e.replace(/([A-Z])/g, function (e, n) {\n            return \"-\" + n.toLowerCase();\n        }).replace(/^ms-/, \"-ms-\");\n    }\n\n    function m(n, o) {\n        var r = n.length;\n        if (\"CSS\" in e && \"supports\" in e.CSS) {\n            for (; r--;) {\n                if (e.CSS.supports(d(n[r]), o)) return !0;\n            }return !1;\n        }\n        if (\"CSSSupportsRule\" in e) {\n            for (var i = []; r--;) {\n                i.push(\"(\" + d(n[r]) + \":\" + o + \")\");\n            }return i = i.join(\" or \"), l(\"@supports (\" + i + \") { #modernizr { position: absolute; } }\", function (e) {\n                return \"absolute\" == getComputedStyle(e, null).position;\n            });\n        }\n        return t;\n    }\n\n    function v(e, n, r, i) {\n        function s() {\n            f && (delete N.style, delete N.modElem);\n        }\n        if (i = o(i, \"undefined\") ? !1 : i, !o(r, \"undefined\")) {\n            var l = m(e, r);\n            if (!o(l, \"undefined\")) return l;\n        }\n        for (var f, p, d, v, y, h = [\"modernizr\", \"tspan\"]; !N.style;) {\n            f = !0, N.modElem = a(h.shift()), N.style = N.modElem.style;\n        }for (d = e.length, p = 0; d > p; p++) {\n            if (v = e[p], y = N.style[v], c(v, \"-\") && (v = u(v)), N.style[v] !== t) {\n                if (i || o(r, \"undefined\")) return s(), \"pfx\" == n ? v : !0;\n                try {\n                    N.style[v] = r;\n                } catch (g) {}\n                if (N.style[v] != y) return s(), \"pfx\" == n ? v : !0;\n            }\n        }return s(), !1;\n    }\n\n    function y(e, n, t, r, i) {\n        var a = e.charAt(0).toUpperCase() + e.slice(1),\n            s = (e + \" \" + P.join(a + \" \") + a).split(\" \");\n        return o(n, \"string\") || o(n, \"undefined\") ? v(s, n, r, i) : (s = (e + \" \" + z.join(a + \" \") + a).split(\" \"), p(s, n, t));\n    }\n    var h = [],\n        g = [],\n        C = {\n        _version: \"3.2.0\",\n        _config: {\n            classPrefix: \"\",\n            enableClasses: !0,\n            enableJSClass: !0,\n            usePrefixes: !0\n        },\n        _q: [],\n        on: function on(e, n) {\n            var t = this;\n            setTimeout(function () {\n                n(t[e]);\n            }, 0);\n        },\n        addTest: function addTest(e, n, t) {\n            g.push({\n                name: e,\n                fn: n,\n                options: t\n            });\n        },\n        addAsyncTest: function addAsyncTest(e) {\n            g.push({\n                name: null,\n                fn: e\n            });\n        }\n    },\n        Modernizr = function Modernizr() {};\n    Modernizr.prototype = C, Modernizr = new Modernizr();\n    var w = n.documentElement,\n        x = \"svg\" === w.nodeName.toLowerCase(),\n        _ = C._config.usePrefixes ? \" -webkit- -moz- -o- -ms- \".split(\" \") : [];\n    C._prefixes = _, Modernizr.addTest(\"video\", function () {\n        var e = a(\"video\"),\n            n = !1;\n        try {\n            (n = !!e.canPlayType) && (n = new Boolean(n), n.ogg = e.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/, \"\"), n.h264 = e.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/, \"\"), n.webm = e.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/, \"\"), n.vp9 = e.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/, \"\"), n.hls = e.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/, \"\"));\n        } catch (t) {}\n        return n;\n    }), Modernizr.addTest(\"csscalc\", function () {\n        var e = \"width:\",\n            n = \"calc(10px);\",\n            t = a(\"a\");\n        return t.style.cssText = e + _.join(n + e), !!t.style.length;\n    });\n    var S = function () {\n        var n = e.matchMedia || e.msMatchMedia;\n        return n ? function (e) {\n            var t = n(e);\n            return t && t.matches || !1;\n        } : function (n) {\n            var t = !1;\n            return l(\"@media \" + n + \" { #modernizr { position: absolute; } }\", function (n) {\n                t = \"absolute\" == (e.getComputedStyle ? e.getComputedStyle(n, null) : n.currentStyle).position;\n            }), t;\n        };\n    }();\n    C.mq = S;\n    var b = C.testStyles = l;\n    Modernizr.addTest(\"touchevents\", function () {\n        var t;\n        if (\"ontouchstart\" in e || e.DocumentTouch && n instanceof DocumentTouch) t = !0;else {\n            var o = [\"@media (\", _.join(\"touch-enabled),(\"), \"heartz\", \")\", \"{#modernizr{top:9px;position:absolute}}\"].join(\"\");\n            b(o, function (e) {\n                t = 9 === e.offsetTop;\n            });\n        }\n        return t;\n    });\n    var T = \"Moz O ms Webkit\",\n        P = C._config.usePrefixes ? T.split(\" \") : [];\n    C._cssomPrefixes = P;\n    var E = function E(n) {\n        var o,\n            r = _.length,\n            i = e.CSSRule;\n        if (\"undefined\" == typeof i) return t;\n        if (!n) return !1;\n        if (n = n.replace(/^@/, \"\"), o = n.replace(/-/g, \"_\").toUpperCase() + \"_RULE\", o in i) return \"@\" + n;\n        for (var a = 0; r > a; a++) {\n            var s = _[a],\n                l = s.toUpperCase() + \"_\" + o;\n            if (l in i) return \"@-\" + s.toLowerCase() + \"-\" + n;\n        }\n        return !1;\n    };\n    C.atRule = E;\n    var z = C._config.usePrefixes ? T.toLowerCase().split(\" \") : [];\n    C._domPrefixes = z;\n    var j = {\n        elem: a(\"modernizr\")\n    };\n    Modernizr._q.push(function () {\n        delete j.elem;\n    });\n    var N = {\n        style: j.elem.style\n    };\n    Modernizr._q.unshift(function () {\n        delete N.style;\n    }), C.testAllProps = y;\n    var L = C.prefixed = function (e, n, t) {\n        return 0 === e.indexOf(\"@\") ? E(e) : (-1 != e.indexOf(\"-\") && (e = u(e)), n ? y(e, n, t) : y(e, \"pfx\"));\n    };\n    Modernizr.addTest(\"matchmedia\", !!L(\"matchMedia\", e)), r(), i(h), delete C.addTest, delete C.addAsyncTest;\n    for (var $ = 0; $ < Modernizr._q.length; $++) {\n        Modernizr._q[$]();\n    }e.Modernizr = Modernizr;\n}(window, document);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* eslint-disable */\n/*!\n * VERSION: 1.19.0\n * DATE: 2016-07-16\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2016, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n */\n!function (a, b) {\n  \"use strict\";\n  var c = {},\n      d = a.GreenSockGlobals = a.GreenSockGlobals || a;if (!d.TweenLite) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = function j(a) {\n      var b,\n          c = a.split(\".\"),\n          e = d;for (b = 0; b < c.length; b++) {\n        e[c[b]] = e = e[c[b]] || {};\n      }return e;\n    },\n        k = j(\"com.greensock\"),\n        l = 1e-10,\n        m = function m(a) {\n      var b,\n          c = [],\n          d = a.length;for (b = 0; b !== d; c.push(a[b++])) {}return c;\n    },\n        n = function n() {},\n        o = function () {\n      var a = Object.prototype.toString,\n          b = a.call([]);return function (c) {\n        return null != c && (c instanceof Array || \"object\" == (typeof c === \"undefined\" ? \"undefined\" : _typeof(c)) && !!c.push && a.call(c) === b);\n      };\n    }(),\n        p = {},\n        q = function q(e, f, g, h) {\n      this.sc = p[e] ? p[e].sc : [], p[e] = this, this.gsClass = null, this.func = g;var i = [];this.check = function (k) {\n        for (var l, m, n, o, r, s = f.length, t = s; --s > -1;) {\n          (l = p[f[s]] || new q(f[s], [])).gsClass ? (i[s] = l.gsClass, t--) : k && l.sc.push(this);\n        }if (0 === t && g) {\n          if (m = (\"com.greensock.\" + e).split(\".\"), n = m.pop(), o = j(m.join(\".\"))[n] = this.gsClass = g.apply(g, i), h) if (d[n] = c[n] = o, r = \"undefined\" != typeof module && module.exports, !r && \"function\" == \"function\" && __webpack_require__(6)) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return o;\n          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if (r) if (e === b) {\n            module.exports = c[b] = o;for (s in c) {\n              o[s] = c[s];\n            }\n          } else c[b] && (c[b][n] = o);for (s = 0; s < this.sc.length; s++) {\n            this.sc[s].check();\n          }\n        }\n      }, this.check(!0);\n    },\n        r = a._gsDefine = function (a, b, c, d) {\n      return new q(a, b, c, d);\n    },\n        s = k._class = function (a, b, c) {\n      return b = b || function () {}, r(a, [], function () {\n        return b;\n      }, c), b;\n    };r.globals = d;var t = [0, 0, 1, 1],\n        u = s(\"easing.Ease\", function (a, b, c, d) {\n      this._func = a, this._type = c || 0, this._power = d || 0, this._params = b ? t.concat(b) : t;\n    }, !0),\n        v = u.map = {},\n        w = u.register = function (a, b, c, d) {\n      for (var e, f, g, h, i = b.split(\",\"), j = i.length, l = (c || \"easeIn,easeOut,easeInOut\").split(\",\"); --j > -1;) {\n        for (f = i[j], e = d ? s(\"easing.\" + f, null, !0) : k.easing[f] || {}, g = l.length; --g > -1;) {\n          h = l[g], v[f + \".\" + h] = v[h + f] = e[h] = a.getRatio ? a : a[h] || new a();\n        }\n      }\n    };for (g = u.prototype, g._calcEnd = !1, g.getRatio = function (a) {\n      if (this._func) return this._params[0] = a, this._func.apply(null, this._params);var b = this._type,\n          c = this._power,\n          d = 1 === b ? 1 - a : 2 === b ? a : .5 > a ? 2 * a : 2 * (1 - a);return 1 === c ? d *= d : 2 === c ? d *= d * d : 3 === c ? d *= d * d * d : 4 === c && (d *= d * d * d * d), 1 === b ? 1 - d : 2 === b ? d : .5 > a ? d / 2 : 1 - d / 2;\n    }, e = [\"Linear\", \"Quad\", \"Cubic\", \"Quart\", \"Quint,Strong\"], f = e.length; --f > -1;) {\n      g = e[f] + \",Power\" + f, w(new u(null, null, 1, f), g, \"easeOut\", !0), w(new u(null, null, 2, f), g, \"easeIn\" + (0 === f ? \",easeNone\" : \"\")), w(new u(null, null, 3, f), g, \"easeInOut\");\n    }v.linear = k.easing.Linear.easeIn, v.swing = k.easing.Quad.easeInOut;var x = s(\"events.EventDispatcher\", function (a) {\n      this._listeners = {}, this._eventTarget = a || this;\n    });g = x.prototype, g.addEventListener = function (a, b, c, d, e) {\n      e = e || 0;var f,\n          g,\n          j = this._listeners[a],\n          k = 0;for (this !== h || i || h.wake(), null == j && (this._listeners[a] = j = []), g = j.length; --g > -1;) {\n        f = j[g], f.c === b && f.s === c ? j.splice(g, 1) : 0 === k && f.pr < e && (k = g + 1);\n      }j.splice(k, 0, { c: b, s: c, up: d, pr: e });\n    }, g.removeEventListener = function (a, b) {\n      var c,\n          d = this._listeners[a];if (d) for (c = d.length; --c > -1;) {\n        if (d[c].c === b) return void d.splice(c, 1);\n      }\n    }, g.dispatchEvent = function (a) {\n      var b,\n          c,\n          d,\n          e = this._listeners[a];if (e) for (b = e.length, b > 1 && (e = e.slice(0)), c = this._eventTarget; --b > -1;) {\n        d = e[b], d && (d.up ? d.c.call(d.s || c, { type: a, target: c }) : d.c.call(d.s || c));\n      }\n    };var y = a.requestAnimationFrame,\n        z = a.cancelAnimationFrame,\n        A = Date.now || function () {\n      return new Date().getTime();\n    },\n        B = A();for (e = [\"ms\", \"moz\", \"webkit\", \"o\"], f = e.length; --f > -1 && !y;) {\n      y = a[e[f] + \"RequestAnimationFrame\"], z = a[e[f] + \"CancelAnimationFrame\"] || a[e[f] + \"CancelRequestAnimationFrame\"];\n    }s(\"Ticker\", function (a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          j = this,\n          k = A(),\n          m = b !== !1 && y ? \"auto\" : !1,\n          o = 500,\n          p = 33,\n          q = \"tick\",\n          r = function r(a) {\n        var b,\n            h,\n            i = A() - B;i > o && (k += i - p), B += i, j.time = (B - k) / 1e3, b = j.time - g, (!c || b > 0 || a === !0) && (j.frame++, g += b + (b >= f ? .004 : f - b), h = !0), a !== !0 && (e = d(r)), h && j.dispatchEvent(q);\n      };x.call(j), j.time = j.frame = 0, j.tick = function () {\n        r(!0);\n      }, j.lagSmoothing = function (a, b) {\n        o = a || 1 / l, p = Math.min(b, o, 0);\n      }, j.sleep = function () {\n        null != e && (m && z ? z(e) : clearTimeout(e), d = n, e = null, j === h && (i = !1));\n      }, j.wake = function (a) {\n        null !== e ? j.sleep() : a ? k += -B + (B = A()) : j.frame > 10 && (B = A() - o + 5), d = 0 === c ? n : m && y ? y : function (a) {\n          return setTimeout(a, 1e3 * (g - j.time) + 1 | 0);\n        }, j === h && (i = !0), r(2);\n      }, j.fps = function (a) {\n        return arguments.length ? (c = a, f = 1 / (c || 60), g = this.time + f, void j.wake()) : c;\n      }, j.useRAF = function (a) {\n        return arguments.length ? (j.sleep(), m = a, void j.fps(c)) : m;\n      }, j.fps(a), setTimeout(function () {\n        \"auto\" === m && j.frame < 5 && \"hidden\" !== document.visibilityState && j.useRAF(!1);\n      }, 1500);\n    }), g = k.Ticker.prototype = new k.events.EventDispatcher(), g.constructor = k.Ticker;var C = s(\"core.Animation\", function (a, b) {\n      if (this.vars = b = b || {}, this._duration = this._totalDuration = a || 0, this._delay = Number(b.delay) || 0, this._timeScale = 1, this._active = b.immediateRender === !0, this.data = b.data, this._reversed = b.reversed === !0, V) {\n        i || h.wake();var c = this.vars.useFrames ? U : V;c.add(this, c._time), this.vars.paused && this.paused(!0);\n      }\n    });h = C.ticker = new k.Ticker(), g = C.prototype, g._dirty = g._gc = g._initted = g._paused = !1, g._totalTime = g._time = 0, g._rawPrevTime = -1, g._next = g._last = g._onUpdate = g._timeline = g.timeline = null, g._paused = !1;var D = function D() {\n      i && A() - B > 2e3 && h.wake(), setTimeout(D, 2e3);\n    };D(), g.play = function (a, b) {\n      return null != a && this.seek(a, b), this.reversed(!1).paused(!1);\n    }, g.pause = function (a, b) {\n      return null != a && this.seek(a, b), this.paused(!0);\n    }, g.resume = function (a, b) {\n      return null != a && this.seek(a, b), this.paused(!1);\n    }, g.seek = function (a, b) {\n      return this.totalTime(Number(a), b !== !1);\n    }, g.restart = function (a, b) {\n      return this.reversed(!1).paused(!1).totalTime(a ? -this._delay : 0, b !== !1, !0);\n    }, g.reverse = function (a, b) {\n      return null != a && this.seek(a || this.totalDuration(), b), this.reversed(!0).paused(!1);\n    }, g.render = function (a, b, c) {}, g.invalidate = function () {\n      return this._time = this._totalTime = 0, this._initted = this._gc = !1, this._rawPrevTime = -1, (this._gc || !this.timeline) && this._enabled(!0), this;\n    }, g.isActive = function () {\n      var a,\n          b = this._timeline,\n          c = this._startTime;return !b || !this._gc && !this._paused && b.isActive() && (a = b.rawTime()) >= c && a < c + this.totalDuration() / this._timeScale;\n    }, g._enabled = function (a, b) {\n      return i || h.wake(), this._gc = !a, this._active = this.isActive(), b !== !0 && (a && !this.timeline ? this._timeline.add(this, this._startTime - this._delay) : !a && this.timeline && this._timeline._remove(this, !0)), !1;\n    }, g._kill = function (a, b) {\n      return this._enabled(!1, !1);\n    }, g.kill = function (a, b) {\n      return this._kill(a, b), this;\n    }, g._uncache = function (a) {\n      for (var b = a ? this : this.timeline; b;) {\n        b._dirty = !0, b = b.timeline;\n      }return this;\n    }, g._swapSelfInParams = function (a) {\n      for (var b = a.length, c = a.concat(); --b > -1;) {\n        \"{self}\" === a[b] && (c[b] = this);\n      }return c;\n    }, g._callback = function (a) {\n      var b = this.vars,\n          c = b[a],\n          d = b[a + \"Params\"],\n          e = b[a + \"Scope\"] || b.callbackScope || this,\n          f = d ? d.length : 0;switch (f) {case 0:\n          c.call(e);break;case 1:\n          c.call(e, d[0]);break;case 2:\n          c.call(e, d[0], d[1]);break;default:\n          c.apply(e, d);}\n    }, g.eventCallback = function (a, b, c, d) {\n      if (\"on\" === (a || \"\").substr(0, 2)) {\n        var e = this.vars;if (1 === arguments.length) return e[a];null == b ? delete e[a] : (e[a] = b, e[a + \"Params\"] = o(c) && -1 !== c.join(\"\").indexOf(\"{self}\") ? this._swapSelfInParams(c) : c, e[a + \"Scope\"] = d), \"onUpdate\" === a && (this._onUpdate = b);\n      }return this;\n    }, g.delay = function (a) {\n      return arguments.length ? (this._timeline.smoothChildTiming && this.startTime(this._startTime + a - this._delay), this._delay = a, this) : this._delay;\n    }, g.duration = function (a) {\n      return arguments.length ? (this._duration = this._totalDuration = a, this._uncache(!0), this._timeline.smoothChildTiming && this._time > 0 && this._time < this._duration && 0 !== a && this.totalTime(this._totalTime * (a / this._duration), !0), this) : (this._dirty = !1, this._duration);\n    }, g.totalDuration = function (a) {\n      return this._dirty = !1, arguments.length ? this.duration(a) : this._totalDuration;\n    }, g.time = function (a, b) {\n      return arguments.length ? (this._dirty && this.totalDuration(), this.totalTime(a > this._duration ? this._duration : a, b)) : this._time;\n    }, g.totalTime = function (a, b, c) {\n      if (i || h.wake(), !arguments.length) return this._totalTime;if (this._timeline) {\n        if (0 > a && !c && (a += this.totalDuration()), this._timeline.smoothChildTiming) {\n          this._dirty && this.totalDuration();var d = this._totalDuration,\n              e = this._timeline;if (a > d && !c && (a = d), this._startTime = (this._paused ? this._pauseTime : e._time) - (this._reversed ? d - a : a) / this._timeScale, e._dirty || this._uncache(!1), e._timeline) for (; e._timeline;) {\n            e._timeline._time !== (e._startTime + e._totalTime) / e._timeScale && e.totalTime(e._totalTime, !0), e = e._timeline;\n          }\n        }this._gc && this._enabled(!0, !1), (this._totalTime !== a || 0 === this._duration) && (I.length && X(), this.render(a, b, !1), I.length && X());\n      }return this;\n    }, g.progress = g.totalProgress = function (a, b) {\n      var c = this.duration();return arguments.length ? this.totalTime(c * a, b) : c ? this._time / c : this.ratio;\n    }, g.startTime = function (a) {\n      return arguments.length ? (a !== this._startTime && (this._startTime = a, this.timeline && this.timeline._sortChildren && this.timeline.add(this, a - this._delay)), this) : this._startTime;\n    }, g.endTime = function (a) {\n      return this._startTime + (0 != a ? this.totalDuration() : this.duration()) / this._timeScale;\n    }, g.timeScale = function (a) {\n      if (!arguments.length) return this._timeScale;if (a = a || l, this._timeline && this._timeline.smoothChildTiming) {\n        var b = this._pauseTime,\n            c = b || 0 === b ? b : this._timeline.totalTime();this._startTime = c - (c - this._startTime) * this._timeScale / a;\n      }return this._timeScale = a, this._uncache(!1);\n    }, g.reversed = function (a) {\n      return arguments.length ? (a != this._reversed && (this._reversed = a, this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, !0)), this) : this._reversed;\n    }, g.paused = function (a) {\n      if (!arguments.length) return this._paused;var b,\n          c,\n          d = this._timeline;return a != this._paused && d && (i || a || h.wake(), b = d.rawTime(), c = b - this._pauseTime, !a && d.smoothChildTiming && (this._startTime += c, this._uncache(!1)), this._pauseTime = a ? b : null, this._paused = a, this._active = this.isActive(), !a && 0 !== c && this._initted && this.duration() && (b = d.smoothChildTiming ? this._totalTime : (b - this._startTime) / this._timeScale, this.render(b, b === this._totalTime, !0))), this._gc && !a && this._enabled(!0, !1), this;\n    };var E = s(\"core.SimpleTimeline\", function (a) {\n      C.call(this, 0, a), this.autoRemoveChildren = this.smoothChildTiming = !0;\n    });g = E.prototype = new C(), g.constructor = E, g.kill()._gc = !1, g._first = g._last = g._recent = null, g._sortChildren = !1, g.add = g.insert = function (a, b, c, d) {\n      var e, f;if (a._startTime = Number(b || 0) + a._delay, a._paused && this !== a._timeline && (a._pauseTime = a._startTime + (this.rawTime() - a._startTime) / a._timeScale), a.timeline && a.timeline._remove(a, !0), a.timeline = a._timeline = this, a._gc && a._enabled(!0, !0), e = this._last, this._sortChildren) for (f = a._startTime; e && e._startTime > f;) {\n        e = e._prev;\n      }return e ? (a._next = e._next, e._next = a) : (a._next = this._first, this._first = a), a._next ? a._next._prev = a : this._last = a, a._prev = e, this._recent = a, this._timeline && this._uncache(!0), this;\n    }, g._remove = function (a, b) {\n      return a.timeline === this && (b || a._enabled(!1, !0), a._prev ? a._prev._next = a._next : this._first === a && (this._first = a._next), a._next ? a._next._prev = a._prev : this._last === a && (this._last = a._prev), a._next = a._prev = a.timeline = null, a === this._recent && (this._recent = this._last), this._timeline && this._uncache(!0)), this;\n    }, g.render = function (a, b, c) {\n      var d,\n          e = this._first;for (this._totalTime = this._time = this._rawPrevTime = a; e;) {\n        d = e._next, (e._active || a >= e._startTime && !e._paused) && (e._reversed ? e.render((e._dirty ? e.totalDuration() : e._totalDuration) - (a - e._startTime) * e._timeScale, b, c) : e.render((a - e._startTime) * e._timeScale, b, c)), e = d;\n      }\n    }, g.rawTime = function () {\n      return i || h.wake(), this._totalTime;\n    };var F = s(\"TweenLite\", function (b, c, d) {\n      if (C.call(this, c, d), this.render = F.prototype.render, null == b) throw \"Cannot tween a null target.\";this.target = b = \"string\" != typeof b ? b : F.selector(b) || b;var e,\n          f,\n          g,\n          h = b.jquery || b.length && b !== a && b[0] && (b[0] === a || b[0].nodeType && b[0].style && !b.nodeType),\n          i = this.vars.overwrite;if (this._overwrite = i = null == i ? T[F.defaultOverwrite] : \"number\" == typeof i ? i >> 0 : T[i], (h || b instanceof Array || b.push && o(b)) && \"number\" != typeof b[0]) for (this._targets = g = m(b), this._propLookup = [], this._siblings = [], e = 0; e < g.length; e++) {\n        f = g[e], f ? \"string\" != typeof f ? f.length && f !== a && f[0] && (f[0] === a || f[0].nodeType && f[0].style && !f.nodeType) ? (g.splice(e--, 1), this._targets = g = g.concat(m(f))) : (this._siblings[e] = Y(f, this, !1), 1 === i && this._siblings[e].length > 1 && $(f, this, null, 1, this._siblings[e])) : (f = g[e--] = F.selector(f), \"string\" == typeof f && g.splice(e + 1, 1)) : g.splice(e--, 1);\n      } else this._propLookup = {}, this._siblings = Y(b, this, !1), 1 === i && this._siblings.length > 1 && $(b, this, null, 1, this._siblings);(this.vars.immediateRender || 0 === c && 0 === this._delay && this.vars.immediateRender !== !1) && (this._time = -l, this.render(Math.min(0, -this._delay)));\n    }, !0),\n        G = function G(b) {\n      return b && b.length && b !== a && b[0] && (b[0] === a || b[0].nodeType && b[0].style && !b.nodeType);\n    },\n        H = function H(a, b) {\n      var c,\n          d = {};for (c in a) {\n        S[c] || c in b && \"transform\" !== c && \"x\" !== c && \"y\" !== c && \"width\" !== c && \"height\" !== c && \"className\" !== c && \"border\" !== c || !(!P[c] || P[c] && P[c]._autoCSS) || (d[c] = a[c], delete a[c]);\n      }a.css = d;\n    };g = F.prototype = new C(), g.constructor = F, g.kill()._gc = !1, g.ratio = 0, g._firstPT = g._targets = g._overwrittenProps = g._startAt = null, g._notifyPluginsOfEnabled = g._lazy = !1, F.version = \"1.19.0\", F.defaultEase = g._ease = new u(null, null, 1, 1), F.defaultOverwrite = \"auto\", F.ticker = h, F.autoSleep = 120, F.lagSmoothing = function (a, b) {\n      h.lagSmoothing(a, b);\n    }, F.selector = a.$ || a.jQuery || function (b) {\n      var c = a.$ || a.jQuery;return c ? (F.selector = c, c(b)) : \"undefined\" == typeof document ? b : document.querySelectorAll ? document.querySelectorAll(b) : document.getElementById(\"#\" === b.charAt(0) ? b.substr(1) : b);\n    };var I = [],\n        J = {},\n        K = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi,\n        L = function L(a) {\n      for (var b, c = this._firstPT, d = 1e-6; c;) {\n        b = c.blob ? a ? this.join(\"\") : this.start : c.c * a + c.s, c.m ? b = c.m(b, this._target || c.t) : d > b && b > -d && (b = 0), c.f ? c.fp ? c.t[c.p](c.fp, b) : c.t[c.p](b) : c.t[c.p] = b, c = c._next;\n      }\n    },\n        M = function M(a, b, c, d) {\n      var e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l = [a, b],\n          m = 0,\n          n = \"\",\n          o = 0;for (l.start = a, c && (c(l), a = l[0], b = l[1]), l.length = 0, e = a.match(K) || [], f = b.match(K) || [], d && (d._next = null, d.blob = 1, l._firstPT = l._applyPT = d), i = f.length, h = 0; i > h; h++) {\n        k = f[h], j = b.substr(m, b.indexOf(k, m) - m), n += j || !h ? j : \",\", m += j.length, o ? o = (o + 1) % 5 : \"rgba(\" === j.substr(-5) && (o = 1), k === e[h] || e.length <= h ? n += k : (n && (l.push(n), n = \"\"), g = parseFloat(e[h]), l.push(g), l._firstPT = { _next: l._firstPT, t: l, p: l.length - 1, s: g, c: (\"=\" === k.charAt(1) ? parseInt(k.charAt(0) + \"1\", 10) * parseFloat(k.substr(2)) : parseFloat(k) - g) || 0, f: 0, m: o && 4 > o ? Math.round : 0 }), m += k.length;\n      }return n += b.substr(m), n && l.push(n), l.setRatio = L, l;\n    },\n        N = function N(a, b, c, d, e, f, g, h, i) {\n      \"function\" == typeof d && (d = d(i || 0, a));var j,\n          k,\n          l = \"get\" === c ? a[b] : c,\n          m = _typeof(a[b]),\n          n = \"string\" == typeof d && \"=\" === d.charAt(1),\n          o = { t: a, p: b, s: l, f: \"function\" === m, pg: 0, n: e || b, m: f ? \"function\" == typeof f ? f : Math.round : 0, pr: 0, c: n ? parseInt(d.charAt(0) + \"1\", 10) * parseFloat(d.substr(2)) : parseFloat(d) - l || 0 };return \"number\" !== m && (\"function\" === m && \"get\" === c && (k = b.indexOf(\"set\") || \"function\" != typeof a[\"get\" + b.substr(3)] ? b : \"get\" + b.substr(3), o.s = l = g ? a[k](g) : a[k]()), \"string\" == typeof l && (g || isNaN(l)) ? (o.fp = g, j = M(l, d, h || F.defaultStringFilter, o), o = { t: j, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: e || b, pr: 0, m: 0 }) : n || (o.s = parseFloat(l), o.c = parseFloat(d) - o.s || 0)), o.c ? ((o._next = this._firstPT) && (o._next._prev = o), this._firstPT = o, o) : void 0;\n    },\n        O = F._internals = { isArray: o, isSelector: G, lazyTweens: I, blobDif: M },\n        P = F._plugins = {},\n        Q = O.tweenLookup = {},\n        R = 0,\n        S = O.reservedProps = { ease: 1, delay: 1, overwrite: 1, onComplete: 1, onCompleteParams: 1, onCompleteScope: 1, useFrames: 1, runBackwards: 1, startAt: 1, onUpdate: 1, onUpdateParams: 1, onUpdateScope: 1, onStart: 1, onStartParams: 1, onStartScope: 1, onReverseComplete: 1, onReverseCompleteParams: 1, onReverseCompleteScope: 1, onRepeat: 1, onRepeatParams: 1, onRepeatScope: 1, easeParams: 1, yoyo: 1, immediateRender: 1, repeat: 1, repeatDelay: 1, data: 1, paused: 1, reversed: 1, autoCSS: 1, lazy: 1, onOverwrite: 1, callbackScope: 1, stringFilter: 1, id: 1 },\n        T = { none: 0, all: 1, auto: 2, concurrent: 3, allOnStart: 4, preexisting: 5, \"true\": 1, \"false\": 0 },\n        U = C._rootFramesTimeline = new E(),\n        V = C._rootTimeline = new E(),\n        W = 30,\n        X = O.lazyRender = function () {\n      var a,\n          b = I.length;for (J = {}; --b > -1;) {\n        a = I[b], a && a._lazy !== !1 && (a.render(a._lazy[0], a._lazy[1], !0), a._lazy = !1);\n      }I.length = 0;\n    };V._startTime = h.time, U._startTime = h.frame, V._active = U._active = !0, setTimeout(X, 1), C._updateRoot = F.render = function () {\n      var a, b, c;if (I.length && X(), V.render((h.time - V._startTime) * V._timeScale, !1, !1), U.render((h.frame - U._startTime) * U._timeScale, !1, !1), I.length && X(), h.frame >= W) {\n        W = h.frame + (parseInt(F.autoSleep, 10) || 120);for (c in Q) {\n          for (b = Q[c].tweens, a = b.length; --a > -1;) {\n            b[a]._gc && b.splice(a, 1);\n          }0 === b.length && delete Q[c];\n        }if (c = V._first, (!c || c._paused) && F.autoSleep && !U._first && 1 === h._listeners.tick.length) {\n          for (; c && c._paused;) {\n            c = c._next;\n          }c || h.sleep();\n        }\n      }\n    }, h.addEventListener(\"tick\", C._updateRoot);var Y = function Y(a, b, c) {\n      var d,\n          e,\n          f = a._gsTweenID;if (Q[f || (a._gsTweenID = f = \"t\" + R++)] || (Q[f] = { target: a, tweens: [] }), b && (d = Q[f].tweens, d[e = d.length] = b, c)) for (; --e > -1;) {\n        d[e] === b && d.splice(e, 1);\n      }return Q[f].tweens;\n    },\n        Z = function Z(a, b, c, d) {\n      var e,\n          f,\n          g = a.vars.onOverwrite;return g && (e = g(a, b, c, d)), g = F.onOverwrite, g && (f = g(a, b, c, d)), e !== !1 && f !== !1;\n    },\n        $ = function $(a, b, c, d, e) {\n      var f, g, h, i;if (1 === d || d >= 4) {\n        for (i = e.length, f = 0; i > f; f++) {\n          if ((h = e[f]) !== b) h._gc || h._kill(null, a, b) && (g = !0);else if (5 === d) break;\n        }return g;\n      }var j,\n          k = b._startTime + l,\n          m = [],\n          n = 0,\n          o = 0 === b._duration;for (f = e.length; --f > -1;) {\n        (h = e[f]) === b || h._gc || h._paused || (h._timeline !== b._timeline ? (j = j || _(b, 0, o), 0 === _(h, j, o) && (m[n++] = h)) : h._startTime <= k && h._startTime + h.totalDuration() / h._timeScale > k && ((o || !h._initted) && k - h._startTime <= 2e-10 || (m[n++] = h)));\n      }for (f = n; --f > -1;) {\n        if (h = m[f], 2 === d && h._kill(c, a, b) && (g = !0), 2 !== d || !h._firstPT && h._initted) {\n          if (2 !== d && !Z(h, b)) continue;h._enabled(!1, !1) && (g = !0);\n        }\n      }return g;\n    },\n        _ = function _(a, b, c) {\n      for (var d = a._timeline, e = d._timeScale, f = a._startTime; d._timeline;) {\n        if (f += d._startTime, e *= d._timeScale, d._paused) return -100;d = d._timeline;\n      }return f /= e, f > b ? f - b : c && f === b || !a._initted && 2 * l > f - b ? l : (f += a.totalDuration() / a._timeScale / e) > b + l ? 0 : f - b - l;\n    };g._init = function () {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          g = this.vars,\n          h = this._overwrittenProps,\n          i = this._duration,\n          j = !!g.immediateRender,\n          k = g.ease;if (g.startAt) {\n        this._startAt && (this._startAt.render(-1, !0), this._startAt.kill()), e = {};for (d in g.startAt) {\n          e[d] = g.startAt[d];\n        }if (e.overwrite = !1, e.immediateRender = !0, e.lazy = j && g.lazy !== !1, e.startAt = e.delay = null, this._startAt = F.to(this.target, 0, e), j) if (this._time > 0) this._startAt = null;else if (0 !== i) return;\n      } else if (g.runBackwards && 0 !== i) if (this._startAt) this._startAt.render(-1, !0), this._startAt.kill(), this._startAt = null;else {\n        0 !== this._time && (j = !1), c = {};for (d in g) {\n          S[d] && \"autoCSS\" !== d || (c[d] = g[d]);\n        }if (c.overwrite = 0, c.data = \"isFromStart\", c.lazy = j && g.lazy !== !1, c.immediateRender = j, this._startAt = F.to(this.target, 0, c), j) {\n          if (0 === this._time) return;\n        } else this._startAt._init(), this._startAt._enabled(!1), this.vars.immediateRender && (this._startAt = null);\n      }if (this._ease = k = k ? k instanceof u ? k : \"function\" == typeof k ? new u(k, g.easeParams) : v[k] || F.defaultEase : F.defaultEase, g.easeParams instanceof Array && k.config && (this._ease = k.config.apply(k, g.easeParams)), this._easeType = this._ease._type, this._easePower = this._ease._power, this._firstPT = null, this._targets) for (f = this._targets.length, a = 0; f > a; a++) {\n        this._initProps(this._targets[a], this._propLookup[a] = {}, this._siblings[a], h ? h[a] : null, a) && (b = !0);\n      } else b = this._initProps(this.target, this._propLookup, this._siblings, h, 0);if (b && F._onPluginEvent(\"_onInitAllProps\", this), h && (this._firstPT || \"function\" != typeof this.target && this._enabled(!1, !1)), g.runBackwards) for (c = this._firstPT; c;) {\n        c.s += c.c, c.c = -c.c, c = c._next;\n      }this._onUpdate = g.onUpdate, this._initted = !0;\n    }, g._initProps = function (b, c, d, e, f) {\n      var g, h, i, j, k, l;if (null == b) return !1;J[b._gsTweenID] && X(), this.vars.css || b.style && b !== a && b.nodeType && P.css && this.vars.autoCSS !== !1 && H(this.vars, b);for (g in this.vars) {\n        if (l = this.vars[g], S[g]) l && (l instanceof Array || l.push && o(l)) && -1 !== l.join(\"\").indexOf(\"{self}\") && (this.vars[g] = l = this._swapSelfInParams(l, this));else if (P[g] && (j = new P[g]())._onInitTween(b, this.vars[g], this, f)) {\n          for (this._firstPT = k = { _next: this._firstPT, t: j, p: \"setRatio\", s: 0, c: 1, f: 1, n: g, pg: 1, pr: j._priority, m: 0 }, h = j._overwriteProps.length; --h > -1;) {\n            c[j._overwriteProps[h]] = this._firstPT;\n          }(j._priority || j._onInitAllProps) && (i = !0), (j._onDisable || j._onEnable) && (this._notifyPluginsOfEnabled = !0), k._next && (k._next._prev = k);\n        } else c[g] = N.call(this, b, g, \"get\", l, g, 0, null, this.vars.stringFilter, f);\n      }return e && this._kill(e, b) ? this._initProps(b, c, d, e, f) : this._overwrite > 1 && this._firstPT && d.length > 1 && $(b, this, c, this._overwrite, d) ? (this._kill(c, b), this._initProps(b, c, d, e, f)) : (this._firstPT && (this.vars.lazy !== !1 && this._duration || this.vars.lazy && !this._duration) && (J[b._gsTweenID] = !0), i);\n    }, g.render = function (a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h = this._time,\n          i = this._duration,\n          j = this._rawPrevTime;if (a >= i - 1e-7) this._totalTime = this._time = i, this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1, this._reversed || (d = !0, e = \"onComplete\", c = c || this._timeline.autoRemoveChildren), 0 === i && (this._initted || !this.vars.lazy || c) && (this._startTime === this._timeline._duration && (a = 0), (0 > j || 0 >= a && a >= -1e-7 || j === l && \"isPause\" !== this.data) && j !== a && (c = !0, j > l && (e = \"onReverseComplete\")), this._rawPrevTime = g = !b || a || j === a ? a : l);else if (1e-7 > a) this._totalTime = this._time = 0, this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0, (0 !== h || 0 === i && j > 0) && (e = \"onReverseComplete\", d = this._reversed), 0 > a && (this._active = !1, 0 === i && (this._initted || !this.vars.lazy || c) && (j >= 0 && (j !== l || \"isPause\" !== this.data) && (c = !0), this._rawPrevTime = g = !b || a || j === a ? a : l)), this._initted || (c = !0);else if (this._totalTime = this._time = a, this._easeType) {\n        var k = a / i,\n            m = this._easeType,\n            n = this._easePower;(1 === m || 3 === m && k >= .5) && (k = 1 - k), 3 === m && (k *= 2), 1 === n ? k *= k : 2 === n ? k *= k * k : 3 === n ? k *= k * k * k : 4 === n && (k *= k * k * k * k), 1 === m ? this.ratio = 1 - k : 2 === m ? this.ratio = k : .5 > a / i ? this.ratio = k / 2 : this.ratio = 1 - k / 2;\n      } else this.ratio = this._ease.getRatio(a / i);if (this._time !== h || c) {\n        if (!this._initted) {\n          if (this._init(), !this._initted || this._gc) return;if (!c && this._firstPT && (this.vars.lazy !== !1 && this._duration || this.vars.lazy && !this._duration)) return this._time = this._totalTime = h, this._rawPrevTime = j, I.push(this), void (this._lazy = [a, b]);this._time && !d ? this.ratio = this._ease.getRatio(this._time / i) : d && this._ease._calcEnd && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1));\n        }for (this._lazy !== !1 && (this._lazy = !1), this._active || !this._paused && this._time !== h && a >= 0 && (this._active = !0), 0 === h && (this._startAt && (a >= 0 ? this._startAt.render(a, b, c) : e || (e = \"_dummyGS\")), this.vars.onStart && (0 !== this._time || 0 === i) && (b || this._callback(\"onStart\"))), f = this._firstPT; f;) {\n          f.f ? f.t[f.p](f.c * this.ratio + f.s) : f.t[f.p] = f.c * this.ratio + f.s, f = f._next;\n        }this._onUpdate && (0 > a && this._startAt && a !== -1e-4 && this._startAt.render(a, b, c), b || (this._time !== h || d || c) && this._callback(\"onUpdate\")), e && (!this._gc || c) && (0 > a && this._startAt && !this._onUpdate && a !== -1e-4 && this._startAt.render(a, b, c), d && (this._timeline.autoRemoveChildren && this._enabled(!1, !1), this._active = !1), !b && this.vars[e] && this._callback(e), 0 === i && this._rawPrevTime === l && g !== l && (this._rawPrevTime = 0));\n      }\n    }, g._kill = function (a, b, c) {\n      if (\"all\" === a && (a = null), null == a && (null == b || b === this.target)) return this._lazy = !1, this._enabled(!1, !1);b = \"string\" != typeof b ? b || this._targets || this.target : F.selector(b) || b;var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m = c && this._time && c._startTime === this._startTime && this._timeline === c._timeline;if ((o(b) || G(b)) && \"number\" != typeof b[0]) for (d = b.length; --d > -1;) {\n        this._kill(a, b[d], c) && (i = !0);\n      } else {\n        if (this._targets) {\n          for (d = this._targets.length; --d > -1;) {\n            if (b === this._targets[d]) {\n              h = this._propLookup[d] || {}, this._overwrittenProps = this._overwrittenProps || [], e = this._overwrittenProps[d] = a ? this._overwrittenProps[d] || {} : \"all\";break;\n            }\n          }\n        } else {\n          if (b !== this.target) return !1;h = this._propLookup, e = this._overwrittenProps = a ? this._overwrittenProps || {} : \"all\";\n        }if (h) {\n          if (j = a || h, k = a !== e && \"all\" !== e && a !== h && (\"object\" != (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) || !a._tempKill), c && (F.onOverwrite || this.vars.onOverwrite)) {\n            for (f in j) {\n              h[f] && (l || (l = []), l.push(f));\n            }if ((l || !a) && !Z(this, c, b, l)) return !1;\n          }for (f in j) {\n            (g = h[f]) && (m && (g.f ? g.t[g.p](g.s) : g.t[g.p] = g.s, i = !0), g.pg && g.t._kill(j) && (i = !0), g.pg && 0 !== g.t._overwriteProps.length || (g._prev ? g._prev._next = g._next : g === this._firstPT && (this._firstPT = g._next), g._next && (g._next._prev = g._prev), g._next = g._prev = null), delete h[f]), k && (e[f] = 1);\n          }!this._firstPT && this._initted && this._enabled(!1, !1);\n        }\n      }return i;\n    }, g.invalidate = function () {\n      return this._notifyPluginsOfEnabled && F._onPluginEvent(\"_onDisable\", this), this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null, this._notifyPluginsOfEnabled = this._active = this._lazy = !1, this._propLookup = this._targets ? {} : [], C.prototype.invalidate.call(this), this.vars.immediateRender && (this._time = -l, this.render(Math.min(0, -this._delay))), this;\n    }, g._enabled = function (a, b) {\n      if (i || h.wake(), a && this._gc) {\n        var c,\n            d = this._targets;if (d) for (c = d.length; --c > -1;) {\n          this._siblings[c] = Y(d[c], this, !0);\n        } else this._siblings = Y(this.target, this, !0);\n      }return C.prototype._enabled.call(this, a, b), this._notifyPluginsOfEnabled && this._firstPT ? F._onPluginEvent(a ? \"_onEnable\" : \"_onDisable\", this) : !1;\n    }, F.to = function (a, b, c) {\n      return new F(a, b, c);\n    }, F.from = function (a, b, c) {\n      return c.runBackwards = !0, c.immediateRender = 0 != c.immediateRender, new F(a, b, c);\n    }, F.fromTo = function (a, b, c, d) {\n      return d.startAt = c, d.immediateRender = 0 != d.immediateRender && 0 != c.immediateRender, new F(a, b, d);\n    }, F.delayedCall = function (a, b, c, d, e) {\n      return new F(b, 0, { delay: a, onComplete: b, onCompleteParams: c, callbackScope: d, onReverseComplete: b, onReverseCompleteParams: c, immediateRender: !1, lazy: !1, useFrames: e, overwrite: 0 });\n    }, F.set = function (a, b) {\n      return new F(a, 0, b);\n    }, F.getTweensOf = function (a, b) {\n      if (null == a) return [];a = \"string\" != typeof a ? a : F.selector(a) || a;var c, d, e, f;if ((o(a) || G(a)) && \"number\" != typeof a[0]) {\n        for (c = a.length, d = []; --c > -1;) {\n          d = d.concat(F.getTweensOf(a[c], b));\n        }for (c = d.length; --c > -1;) {\n          for (f = d[c], e = c; --e > -1;) {\n            f === d[e] && d.splice(c, 1);\n          }\n        }\n      } else for (d = Y(a).concat(), c = d.length; --c > -1;) {\n        (d[c]._gc || b && !d[c].isActive()) && d.splice(c, 1);\n      }return d;\n    }, F.killTweensOf = F.killDelayedCallsTo = function (a, b, c) {\n      \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && (c = b, b = !1);for (var d = F.getTweensOf(a, b), e = d.length; --e > -1;) {\n        d[e]._kill(c, a);\n      }\n    };var aa = s(\"plugins.TweenPlugin\", function (a, b) {\n      this._overwriteProps = (a || \"\").split(\",\"), this._propName = this._overwriteProps[0], this._priority = b || 0, this._super = aa.prototype;\n    }, !0);if (g = aa.prototype, aa.version = \"1.19.0\", aa.API = 2, g._firstPT = null, g._addTween = N, g.setRatio = L, g._kill = function (a) {\n      var b,\n          c = this._overwriteProps,\n          d = this._firstPT;if (null != a[this._propName]) this._overwriteProps = [];else for (b = c.length; --b > -1;) {\n        null != a[c[b]] && c.splice(b, 1);\n      }for (; d;) {\n        null != a[d.n] && (d._next && (d._next._prev = d._prev), d._prev ? (d._prev._next = d._next, d._prev = null) : this._firstPT === d && (this._firstPT = d._next)), d = d._next;\n      }return !1;\n    }, g._mod = g._roundProps = function (a) {\n      for (var b, c = this._firstPT; c;) {\n        b = a[this._propName] || null != c.n && a[c.n.split(this._propName + \"_\").join(\"\")], b && \"function\" == typeof b && (2 === c.f ? c.t._applyPT.m = b : c.m = b), c = c._next;\n      }\n    }, F._onPluginEvent = function (a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = b._firstPT;if (\"_onInitAllProps\" === a) {\n        for (; h;) {\n          for (g = h._next, d = e; d && d.pr > h.pr;) {\n            d = d._next;\n          }(h._prev = d ? d._prev : f) ? h._prev._next = h : e = h, (h._next = d) ? d._prev = h : f = h, h = g;\n        }h = b._firstPT = e;\n      }for (; h;) {\n        h.pg && \"function\" == typeof h.t[a] && h.t[a]() && (c = !0), h = h._next;\n      }return c;\n    }, aa.activate = function (a) {\n      for (var b = a.length; --b > -1;) {\n        a[b].API === aa.API && (P[new a[b]()._propName] = a[b]);\n      }return !0;\n    }, r.plugin = function (a) {\n      if (!(a && a.propName && a.init && a.API)) throw \"illegal plugin definition.\";var b,\n          c = a.propName,\n          d = a.priority || 0,\n          e = a.overwriteProps,\n          f = { init: \"_onInitTween\", set: \"setRatio\", kill: \"_kill\", round: \"_mod\", mod: \"_mod\", initAll: \"_onInitAllProps\" },\n          g = s(\"plugins.\" + c.charAt(0).toUpperCase() + c.substr(1) + \"Plugin\", function () {\n        aa.call(this, c, d), this._overwriteProps = e || [];\n      }, a.global === !0),\n          h = g.prototype = new aa(c);h.constructor = g, g.API = a.API;for (b in f) {\n        \"function\" == typeof a[b] && (h[f[b]] = a[b]);\n      }return g.version = a.version, aa.activate([g]), g;\n    }, e = a._gsQueue) {\n      for (f = 0; f < e.length; f++) {\n        e[f]();\n      }for (g in p) {\n        p[g].func || a.console.log(\"GSAP encountered missing dependency: \" + g);\n      }\n    }i = !1;\n  }\n}(\"undefined\" != typeof module && module.exports && \"undefined\" != typeof global ? global : undefined || window, \"TweenLite\");\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {\n\t'use strict';\n\n\t/**\n\t * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.\n\t *\n\t * @codingstandard ftlabs-jsv2\n\t * @copyright The Financial Times Limited [All Rights Reserved]\n\t * @license MIT License (see LICENSE.txt)\n\t */\n\n\t/*jslint browser:true, node:true*/\n\t/*global define, Event, Node*/\n\n\n\t/**\n\t * Instantiate fast-clicking listeners on the specified layer.\n\t *\n\t * @constructor\n\t * @param {Element} layer The layer to listen on\n\t * @param {Object} [options={}] The options to override the defaults\n\t */\n\tfunction FastClick(layer, options) {\n\t\tvar oldOnClick;\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Whether a click is currently being tracked.\n\t\t *\n\t\t * @type boolean\n\t\t */\n\t\tthis.trackingClick = false;\n\n\n\t\t/**\n\t\t * Timestamp for when click tracking started.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.trackingClickStart = 0;\n\n\n\t\t/**\n\t\t * The element being tracked for a click.\n\t\t *\n\t\t * @type EventTarget\n\t\t */\n\t\tthis.targetElement = null;\n\n\n\t\t/**\n\t\t * X-coordinate of touch start event.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchStartX = 0;\n\n\n\t\t/**\n\t\t * Y-coordinate of touch start event.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchStartY = 0;\n\n\n\t\t/**\n\t\t * ID of the last touch, retrieved from Touch.identifier.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.lastTouchIdentifier = 0;\n\n\n\t\t/**\n\t\t * Touchmove boundary, beyond which a click will be cancelled.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchBoundary = options.touchBoundary || 10;\n\n\n\t\t/**\n\t\t * The FastClick layer.\n\t\t *\n\t\t * @type Element\n\t\t */\n\t\tthis.layer = layer;\n\n\t\t/**\n\t\t * The minimum time between tap(touchstart and touchend) events\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.tapDelay = options.tapDelay || 200;\n\n\t\t/**\n\t\t * The maximum time for a tap\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.tapTimeout = options.tapTimeout || 700;\n\n\t\tif (FastClick.notNeeded(layer)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Some old versions of Android don't have Function.prototype.bind\n\t\tfunction bind(method, context) {\n\t\t\treturn function() { return method.apply(context, arguments); };\n\t\t}\n\n\n\t\tvar methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];\n\t\tvar context = this;\n\t\tfor (var i = 0, l = methods.length; i < l; i++) {\n\t\t\tcontext[methods[i]] = bind(context[methods[i]], context);\n\t\t}\n\n\t\t// Set up event handlers as required\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.addEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.addEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.addEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.addEventListener('click', this.onClick, true);\n\t\tlayer.addEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.addEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.addEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.addEventListener('touchcancel', this.onTouchCancel, false);\n\n\t\t// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick\n\t\t// layer when they are cancelled.\n\t\tif (!Event.prototype.stopImmediatePropagation) {\n\t\t\tlayer.removeEventListener = function(type, callback, capture) {\n\t\t\t\tvar rmv = Node.prototype.removeEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\trmv.call(layer, type, callback.hijacked || callback, capture);\n\t\t\t\t} else {\n\t\t\t\t\trmv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlayer.addEventListener = function(type, callback, capture) {\n\t\t\t\tvar adv = Node.prototype.addEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\tadv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {\n\t\t\t\t\t\tif (!event.propagationStopped) {\n\t\t\t\t\t\t\tcallback(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}), capture);\n\t\t\t\t} else {\n\t\t\t\t\tadv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// If a handler is already declared in the element's onclick attribute, it will be fired before\n\t\t// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and\n\t\t// adding it as listener.\n\t\tif (typeof layer.onclick === 'function') {\n\n\t\t\t// Android browser on at least 3.2 requires a new reference to the function in layer.onclick\n\t\t\t// - the old one won't work if passed to addEventListener directly.\n\t\t\toldOnClick = layer.onclick;\n\t\t\tlayer.addEventListener('click', function(event) {\n\t\t\t\toldOnClick(event);\n\t\t\t}, false);\n\t\t\tlayer.onclick = null;\n\t\t}\n\t}\n\n\t/**\n\t* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.\n\t*\n\t* @type boolean\n\t*/\n\tvar deviceIsWindowsPhone = navigator.userAgent.indexOf(\"Windows Phone\") >= 0;\n\n\t/**\n\t * Android requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;\n\n\n\t/**\n\t * iOS requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;\n\n\n\t/**\n\t * iOS 4 requires an exception for select elements.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOS4 = deviceIsIOS && (/OS 4_\\d(_\\d)?/).test(navigator.userAgent);\n\n\n\t/**\n\t * iOS 6.0-7.* requires the target element to be manually derived\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\\d/).test(navigator.userAgent);\n\n\t/**\n\t * BlackBerry requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;\n\n\t/**\n\t * Determine whether a given element requires a native click.\n\t *\n\t * @param {EventTarget|Element} target Target DOM element\n\t * @returns {boolean} Returns true if the element needs a native click\n\t */\n\tFastClick.prototype.needsClick = function(target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\n\t\t// Don't send a synthetic click to disabled inputs (issue #62)\n\t\tcase 'button':\n\t\tcase 'select':\n\t\tcase 'textarea':\n\t\t\tif (target.disabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'input':\n\n\t\t\t// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)\n\t\t\tif ((deviceIsIOS && target.type === 'file') || target.disabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'label':\n\t\tcase 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames\n\t\tcase 'video':\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (/\\bneedsclick\\b/).test(target.className);\n\t};\n\n\n\t/**\n\t * Determine whether a given element requires a call to focus to simulate click into element.\n\t *\n\t * @param {EventTarget|Element} target Target DOM element\n\t * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.\n\t */\n\tFastClick.prototype.needsFocus = function(target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\t\tcase 'textarea':\n\t\t\treturn true;\n\t\tcase 'select':\n\t\t\treturn !deviceIsAndroid;\n\t\tcase 'input':\n\t\t\tswitch (target.type) {\n\t\t\tcase 'button':\n\t\t\tcase 'checkbox':\n\t\t\tcase 'file':\n\t\t\tcase 'image':\n\t\t\tcase 'radio':\n\t\t\tcase 'submit':\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// No point in attempting to focus disabled inputs\n\t\t\treturn !target.disabled && !target.readOnly;\n\t\tdefault:\n\t\t\treturn (/\\bneedsfocus\\b/).test(target.className);\n\t\t}\n\t};\n\n\n\t/**\n\t * Send a click event to the specified element.\n\t *\n\t * @param {EventTarget|Element} targetElement\n\t * @param {Event} event\n\t */\n\tFastClick.prototype.sendClick = function(targetElement, event) {\n\t\tvar clickEvent, touch;\n\n\t\t// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)\n\t\tif (document.activeElement && document.activeElement !== targetElement) {\n\t\t\tdocument.activeElement.blur();\n\t\t}\n\n\t\ttouch = event.changedTouches[0];\n\n\t\t// Synthesise a click event, with an extra attribute so it can be tracked\n\t\tclickEvent = document.createEvent('MouseEvents');\n\t\tclickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n\t\tclickEvent.forwardedTouchEvent = true;\n\t\ttargetElement.dispatchEvent(clickEvent);\n\t};\n\n\tFastClick.prototype.determineEventType = function(targetElement) {\n\n\t\t//Issue #159: Android Chrome Select Box does not open with a synthetic click event\n\t\tif (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {\n\t\t\treturn 'mousedown';\n\t\t}\n\n\t\treturn 'click';\n\t};\n\n\n\t/**\n\t * @param {EventTarget|Element} targetElement\n\t */\n\tFastClick.prototype.focus = function(targetElement) {\n\t\tvar length;\n\n\t\t// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.\n\t\tif (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {\n\t\t\tlength = targetElement.value.length;\n\t\t\ttargetElement.setSelectionRange(length, length);\n\t\t} else {\n\t\t\ttargetElement.focus();\n\t\t}\n\t};\n\n\n\t/**\n\t * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.\n\t *\n\t * @param {EventTarget|Element} targetElement\n\t */\n\tFastClick.prototype.updateScrollParent = function(targetElement) {\n\t\tvar scrollParent, parentElement;\n\n\t\tscrollParent = targetElement.fastClickScrollParent;\n\n\t\t// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the\n\t\t// target element was moved to another parent.\n\t\tif (!scrollParent || !scrollParent.contains(targetElement)) {\n\t\t\tparentElement = targetElement;\n\t\t\tdo {\n\t\t\t\tif (parentElement.scrollHeight > parentElement.offsetHeight) {\n\t\t\t\t\tscrollParent = parentElement;\n\t\t\t\t\ttargetElement.fastClickScrollParent = parentElement;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tparentElement = parentElement.parentElement;\n\t\t\t} while (parentElement);\n\t\t}\n\n\t\t// Always update the scroll top tracker if possible.\n\t\tif (scrollParent) {\n\t\t\tscrollParent.fastClickLastScrollTop = scrollParent.scrollTop;\n\t\t}\n\t};\n\n\n\t/**\n\t * @param {EventTarget} targetElement\n\t * @returns {Element|EventTarget}\n\t */\n\tFastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {\n\n\t\t// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.\n\t\tif (eventTarget.nodeType === Node.TEXT_NODE) {\n\t\t\treturn eventTarget.parentNode;\n\t\t}\n\n\t\treturn eventTarget;\n\t};\n\n\n\t/**\n\t * On touch start, record the position and scroll offset.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchStart = function(event) {\n\t\tvar targetElement, touch, selection;\n\n\t\t// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).\n\t\tif (event.targetTouches.length > 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttargetElement = this.getTargetElementFromEventTarget(event.target);\n\t\ttouch = event.targetTouches[0];\n\n\t\tif (deviceIsIOS) {\n\n\t\t\t// Only trusted events will deselect text on iOS (issue #49)\n\t\t\tselection = window.getSelection();\n\t\t\tif (selection.rangeCount && !selection.isCollapsed) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!deviceIsIOS4) {\n\n\t\t\t\t// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):\n\t\t\t\t// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched\n\t\t\t\t// with the same identifier as the touch event that previously triggered the click that triggered the alert.\n\t\t\t\t// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an\n\t\t\t\t// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.\n\t\t\t\t// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,\n\t\t\t\t// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,\n\t\t\t\t// random integers, it's safe to to continue if the identifier is 0 here.\n\t\t\t\tif (touch.identifier && touch.identifier === this.lastTouchIdentifier) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tthis.lastTouchIdentifier = touch.identifier;\n\n\t\t\t\t// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:\n\t\t\t\t// 1) the user does a fling scroll on the scrollable layer\n\t\t\t\t// 2) the user stops the fling scroll with another tap\n\t\t\t\t// then the event.target of the last 'touchend' event will be the element that was under the user's finger\n\t\t\t\t// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check\n\t\t\t\t// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).\n\t\t\t\tthis.updateScrollParent(targetElement);\n\t\t\t}\n\t\t}\n\n\t\tthis.trackingClick = true;\n\t\tthis.trackingClickStart = event.timeStamp;\n\t\tthis.targetElement = targetElement;\n\n\t\tthis.touchStartX = touch.pageX;\n\t\tthis.touchStartY = touch.pageY;\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.touchHasMoved = function(event) {\n\t\tvar touch = event.changedTouches[0], boundary = this.touchBoundary;\n\n\t\tif (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Update the last position.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchMove = function(event) {\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the touch has moved, cancel the click tracking\n\t\tif (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {\n\t\t\tthis.trackingClick = false;\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Attempt to find the labelled control for the given label element.\n\t *\n\t * @param {EventTarget|HTMLLabelElement} labelElement\n\t * @returns {Element|null}\n\t */\n\tFastClick.prototype.findControl = function(labelElement) {\n\n\t\t// Fast path for newer browsers supporting the HTML5 control attribute\n\t\tif (labelElement.control !== undefined) {\n\t\t\treturn labelElement.control;\n\t\t}\n\n\t\t// All browsers under test that support touch events also support the HTML5 htmlFor attribute\n\t\tif (labelElement.htmlFor) {\n\t\t\treturn document.getElementById(labelElement.htmlFor);\n\t\t}\n\n\t\t// If no for attribute exists, attempt to retrieve the first labellable descendant element\n\t\t// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label\n\t\treturn labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');\n\t};\n\n\n\t/**\n\t * On touch end, determine whether to send a click event at once.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchEnd = function(event) {\n\t\tvar forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;\n\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {\n\t\t\tthis.cancelNextClick = true;\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Reset to prevent wrong click cancel on input (issue #156).\n\t\tthis.cancelNextClick = false;\n\n\t\tthis.lastClickTime = event.timeStamp;\n\n\t\ttrackingClickStart = this.trackingClickStart;\n\t\tthis.trackingClick = false;\n\t\tthis.trackingClickStart = 0;\n\n\t\t// On some iOS devices, the targetElement supplied with the event is invalid if the layer\n\t\t// is performing a transition or scroll, and has to be re-detected manually. Note that\n\t\t// for this to function correctly, it must be called *after* the event target is checked!\n\t\t// See issue #57; also filed as rdar://13048589 .\n\t\tif (deviceIsIOSWithBadTarget) {\n\t\t\ttouch = event.changedTouches[0];\n\n\t\t\t// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null\n\t\t\ttargetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;\n\t\t\ttargetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;\n\t\t}\n\n\t\ttargetTagName = targetElement.tagName.toLowerCase();\n\t\tif (targetTagName === 'label') {\n\t\t\tforElement = this.findControl(targetElement);\n\t\t\tif (forElement) {\n\t\t\t\tthis.focus(targetElement);\n\t\t\t\tif (deviceIsAndroid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\ttargetElement = forElement;\n\t\t\t}\n\t\t} else if (this.needsFocus(targetElement)) {\n\n\t\t\t// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.\n\t\t\t// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).\n\t\t\tif ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.focus(targetElement);\n\t\t\tthis.sendClick(targetElement, event);\n\n\t\t\t// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.\n\t\t\t// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)\n\t\t\tif (!deviceIsIOS || targetTagName !== 'select') {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (deviceIsIOS && !deviceIsIOS4) {\n\n\t\t\t// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled\n\t\t\t// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).\n\t\t\tscrollParent = targetElement.fastClickScrollParent;\n\t\t\tif (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent the actual click from going though - unless the target node is marked as requiring\n\t\t// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.\n\t\tif (!this.needsClick(targetElement)) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.sendClick(targetElement, event);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * On touch cancel, stop tracking the click.\n\t *\n\t * @returns {void}\n\t */\n\tFastClick.prototype.onTouchCancel = function() {\n\t\tthis.trackingClick = false;\n\t\tthis.targetElement = null;\n\t};\n\n\n\t/**\n\t * Determine mouse events which should be permitted.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onMouse = function(event) {\n\n\t\t// If a target element was never set (because a touch event was never fired) allow the event\n\t\tif (!this.targetElement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (event.forwardedTouchEvent) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Programmatically generated events targeting a specific element should be permitted\n\t\tif (!event.cancelable) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Derive and check the target element to see whether the mouse event needs to be permitted;\n\t\t// unless explicitly enabled, prevent non-touch click events from triggering actions,\n\t\t// to prevent ghost/doubleclicks.\n\t\tif (!this.needsClick(this.targetElement) || this.cancelNextClick) {\n\n\t\t\t// Prevent any user-added listeners declared on FastClick element from being fired.\n\t\t\tif (event.stopImmediatePropagation) {\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} else {\n\n\t\t\t\t// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t\t\tevent.propagationStopped = true;\n\t\t\t}\n\n\t\t\t// Cancel the event\n\t\t\tevent.stopPropagation();\n\t\t\tevent.preventDefault();\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the mouse event is permitted, return true for the action to go through.\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * On actual clicks, determine whether this is a touch-generated click, a click action occurring\n\t * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or\n\t * an actual click which should be permitted.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onClick = function(event) {\n\t\tvar permitted;\n\n\t\t// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.\n\t\tif (this.trackingClick) {\n\t\t\tthis.targetElement = null;\n\t\t\tthis.trackingClick = false;\n\t\t\treturn true;\n\t\t}\n\n\t\t// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.\n\t\tif (event.target.type === 'submit' && event.detail === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tpermitted = this.onMouse(event);\n\n\t\t// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.\n\t\tif (!permitted) {\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\t// If clicks are permitted, return true for the action to go through.\n\t\treturn permitted;\n\t};\n\n\n\t/**\n\t * Remove all FastClick's event listeners.\n\t *\n\t * @returns {void}\n\t */\n\tFastClick.prototype.destroy = function() {\n\t\tvar layer = this.layer;\n\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.removeEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.removeEventListener('click', this.onClick, true);\n\t\tlayer.removeEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.removeEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.removeEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.removeEventListener('touchcancel', this.onTouchCancel, false);\n\t};\n\n\n\t/**\n\t * Check whether FastClick is needed.\n\t *\n\t * @param {Element} layer The layer to listen on\n\t */\n\tFastClick.notNeeded = function(layer) {\n\t\tvar metaViewport;\n\t\tvar chromeVersion;\n\t\tvar blackberryVersion;\n\t\tvar firefoxVersion;\n\n\t\t// Devices that don't support touch don't need FastClick\n\t\tif (typeof window.ontouchstart === 'undefined') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Chrome version - zero for other browsers\n\t\tchromeVersion = +(/Chrome\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];\n\n\t\tif (chromeVersion) {\n\n\t\t\tif (deviceIsAndroid) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// Chrome on Android with user-scalable=\"no\" doesn't need FastClick (issue #89)\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Chrome 32 and above with width=device-width or less don't need FastClick\n\t\t\t\t\tif (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Chrome desktop doesn't need FastClick (issue #15)\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (deviceIsBlackBerry10) {\n\t\t\tblackberryVersion = navigator.userAgent.match(/Version\\/([0-9]*)\\.([0-9]*)/);\n\n\t\t\t// BlackBerry 10.3+ does not require Fastclick library.\n\t\t\t// https://github.com/ftlabs/fastclick/issues/251\n\t\t\tif (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// user-scalable=no eliminates click delay.\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// width=device-width (or less than device-width) eliminates click delay.\n\t\t\t\t\tif (document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)\n\t\tif (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Firefox version - zero for other browsers\n\t\tfirefoxVersion = +(/Firefox\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];\n\n\t\tif (firefoxVersion >= 27) {\n\t\t\t// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896\n\n\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\t\t\tif (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version\n\t\t// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx\n\t\tif (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Factory method for creating a FastClick object\n\t *\n\t * @param {Element} layer The layer to listen on\n\t * @param {Object} [options={}] The options to override the defaults\n\t */\n\tFastClick.attach = function(layer, options) {\n\t\treturn new FastClick(layer, options);\n\t};\n\n\n\tif (true) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn FastClick;\n\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = FastClick.attach;\n\t\tmodule.exports.FastClick = FastClick;\n\t} else {\n\t\twindow.FastClick = FastClick;\n\t}\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NWY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);